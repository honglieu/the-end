import {
  EButtonAction,
  ERentManagerAction
} from '@/app/task-detail/modules/steps/utils/property-tree.enum';

export enum ETaskTemplateStatus {
  PUBLISHED = 'PUBLISHED',
  DRAFT = 'DRAFT',
  ARCHIVED = 'ARCHIVED'
}

export enum ETypeSend {
  SINGLE_EMAIL = 'SINGLE_EMAIL',
  BULK_EMAIL = 'BULK_EMAIL'
}

export enum EStepAction {
  SEND_BASIC_EMAIL = 'send_basic_email',
  SEND_ATTACHMENT = 'send_attachment',
  SCHEDULE_REMINDER = 'schedule_reminder',
  SEND_CONVERSATION_FILES = 'send_conversation_files',
  SEND_REQUEST = 'send_request',
  SEND_CONTACT_CARD = 'send_contact_card',
  SEND_CALENDAR_EVENT = 'send_calendar_event',
  CAPTURE_LEASE_TERMS = 'capture_lease_terms',
  CAPTURE_CONDITIONS_FOR_REQUEST_APPROVAL = 'capture_conditions_for_request_approval',
  CAPTURE_PET_BOND = 'capture_pet_bond',
  CAPTURE_INSPECTION_ACTIONS = 'capture_inspection_actions',
  BOND_RETURN_SUMMARY = 'bond_return_summary',
  CAPTURE_AMOUNT_OWING_TO_VACATE = 'capture_amount_owing_to_vacate',
  CAPTURE_BREAK_LEASE_FEES = 'capture_break_lease_fees',
  LETTING_RECOMMENDATIONS = 'letting_recommendations',
  APPLICATIONS_SHORTLIST = 'applications_shortlist',
  BOND_AMOUNT_DUE = 'bond_amount_due',
  ENTRY_REPORT_DEADLINE = 'entry_report_deadline',
  NOTICE_TO_LEAVE = 'notice_to_leave'
}

export enum EPropertyTreeContactType {
  //Common
  ANY_LANDLORD_IN_TASK = 'ANY_LANDLORD_IN_TASK',
  ANY_TENANT_IN_TASK = 'ANY_TENANT_IN_TASK',
  ANY_SUPPLIER_IN_TASK = 'ANY_SUPPLIER_IN_TASK',

  ALL_ACTIVE_LANDLORDS = 'ALL_ACTIVE_LANDLORDS',
  ALL_PROSPECTIVE_TENANTS = 'ALL_PROSPECTIVE_TENANTS',
  ALL_ACTIVE_TENANTS = 'ALL_ACTIVE_TENANTS',
  ALL_VACATING_TENANTS = 'ALL_VACATING_TENANTS',
  ALL_VACATED_TENANTS = 'ALL_VACATED_TENANTS'
}

export enum ERentManagerContactType {
  //Common
  ANY_LANDLORD_IN_TASK = 'ANY_LANDLORD_IN_TASK',
  ANY_TENANT_IN_TASK = 'ANY_TENANT_IN_TASK',
  ANY_SUPPLIER_IN_TASK = 'ANY_SUPPLIER_IN_TASK',

  ALL_CURRENT_LANDLORDS = 'ALL_CURRENT_LANDLORDS',
  ALL_FUTURE_LANDLORDS = 'ALL_FUTURE_LANDLORDS',
  ALL_PAST_LANDLORDS = 'ALL_PAST_LANDLORDS',
  ALL_CURRENT_TENANTS = 'ALL_CURRENT_TENANTS',
  ALL_FUTURE_TENANTS = 'ALL_FUTURE_TENANTS',
  ALL_PAST_TENANTS = 'ALL_PAST_TENANTS',
  ANY_TENANT_PROSPECT_IN_TASK = 'ANY_TENANT_PROSPECT_IN_TASK',
  ANY_LANDLORD_PROSPECT_IN_TASK = 'ANY_LANDLORD_PROSPECT_IN_TASK'
}

export type EContactType = EPropertyTreeContactType | ERentManagerContactType;

export enum ECalendarEvent {
  //Common
  BREACH_NOTICE_REMEDY_DATE = 'BREACH_NOTICE_REMEDY_DATE',
  ENTRY_NOTICE_ENTRY_DATE = 'ENTRY_NOTICE_ENTRY_DATE',
  LEASE_START_DATE = 'LEASE_START_DATE',
  LEASE_END_DATE = 'LEASE_END_DATE',

  //PT
  COMPLIANCE_NEXT_SERVICE = 'COMPLIANCE_NEXT_SERVICE',
  COMPLIANCE_EXPIRY = 'COMPLIANCE_EXPIRY',
  INGOING_INSPECTION_DATE = 'INGOING_INSPECTION_DATE',
  NUMBER_OF_DAYS_IN_ARREARS = 'NUMBER_OF_DAYS_IN_ARREARS',
  OUTGOING_INSPECTION_DATE = 'OUTGOING_INSPECTION_DATE',
  ROUTINE_INSPECTION_DATE = 'ROUTINE_INSPECTION_DATE',
  VACATE_DATE = 'VACATE_DATE',

  //RM
  ANNUAL_INSPECTION_DATE = 'ANNUAL_INSPECTION_DATE',
  MOVE_OUT_INSPECTION_DATE = 'MOVE_OUT_INSPECTION_DATE',
  MOVE_IN_INSPECTION_DATE = 'MOVE_IN_INSPECTION_DATE',
  PROPERTY_INSPECTION_DATE = 'PROPERTY_INSPECTION_DATE',
  MOVE_IN_DATE = 'MOVE_IN_DATE',
  MOVE_OUT_DATE = 'MOVE_OUT_DATE',
  ISSUE_DUE_DATE = 'ISSUE_DUE_DATE',
  TENANT_INVOICE_DUE_DATE = 'TENANT_INVOICE_DUE_DATE',
  CUSTOM_EVENT = 'CUSTOM_EVENT'
}

export enum ETypeEventRun {
  BEFORE = 'BEFORE',
  AFTER = 'AFTER'
}

export enum ERentalAmount {
  INCREASE = 'INCREASE',
  DECREASE = 'DECREASE',
  MAINTAIN = 'MAINTAIN'
}

export enum EBond {
  INCREASE = 'INCREASE',
  DECREASE = 'DECREASE',
  MAINTAIN = 'MAINTAIN'
}

export enum EContactCardType {
  INDIVIDUAL_SUPPLIER = 'INDIVIDUAL_SUPPLIER',
  CONTACT_TYPE = 'CONTACT_TYPE'
}

export enum EStatusStep {
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  ERROR = 'ERROR'
}

export enum EEventTypes {
  ARREAR = 'ARREAR',
  VACATE = 'VACATE',
  BREACH_REMEDY = 'BREACH_REMEDY',
  LEASE_END = 'LEASE_END',
  LEASE_START = 'LEASE_START',
  GENERAL_EXPIRY = 'GENERAL_EXPIRY',
  ROUTINE_INSPECTION = 'ROUTINE_INSPECTION',
  SMOKE_ALARM_EXPIRY = 'SMOKE_ALARM_EXPIRY',
  INGOING_INSPECTION = 'INGOING_INSPECTION',
  OUTGOING_INSPECTION = 'OUTGOING_INSPECTION',
  GENERAL_NEXT_SERVICE = 'GENERAL_NEXT_SERVICE',
  SMOKE_ALARM_NEXT_SERVICE = 'SMOKE_ALARM_NEXT_SERVICE',
  ENTRY_NOTICE = 'ENTRY_NOTICE',
  ISSUE_OPEN_DATE = 'ISSUE',
  MOVE_IN_DATE = 'MOVE_IN',
  MOVE_OUT_DATE = 'MOVE_OUT',
  TENANT_INVOICE_DUE_DATE = 'INVOICE'
}

export enum EComponentTypes {
  NOTE = 'NOTE',
  CREDITOR_INVOICE = 'CREDITOR_INVOICE',
  TENANCY_INVOICE = 'TENANCY_INVOICE',
  MAINTENANCE_REQUEST = 'MAINTENANCE_REQUEST',
  MAINTENANCE_INVOICE = 'MAINTENANCE_INVOICE',
  ROUTINE_INSPECTION = 'ROUTINE_INSPECTION',
  INGOING_INSPECTION = 'INGOING_INSPECTION',
  OUTGOING_INSPECTION = 'OUTGOING_INSPECTION',
  LEASE_RENEWAL = 'LEASE_RENEWAL',
  VACATE_DETAIL = 'VACATE_DETAIL',
  NEW_TENANCY = 'NEW_TENANCY',
  COMPLIANCE = 'COMPLIANCE',
  ISSUE = 'ISSUE',
  INSPECTION = 'INSPECTION',
  NEW_TENANT = 'NEW_TENANT'
}

export enum PopUpEnum {
  PopupCreateTask = 'PopupCreateTask',
  PopupPublished = 'PopupPublished',
  PopupHelpDocument = 'PopupHelpDocument',
  PopupSelectCRM = 'PopupSelectCrm',
  PopupWarningUnpublish = 'PopupWarningUnpublish'
}

export enum ECreatePopupType {
  CREATE_TASK_EDITOR = 'CREATE_TASK_EDITOR',
  CREATE_FROM_CRATCH = 'CREATE_FROM_CRATCH',
  CREATE_FROM_TEMPLATE = 'CREATE_FROM_TEMPLATE',
  SELECT_CRM = 'SELECT_CRM'
}

export enum EToolbarConfig {
  Published = 'Publish',
  MoveToDraft = 'Move to draft',
  Archive = 'Archive'
}

export enum ECRMState {
  PROPERTY_TREE = 'PROPERTY_TREE',
  RENT_MANAGER = 'RENT_MANAGER'
}

export enum ESelectStepType {
  COMMUNICATION_STEP = 'COMMUNICATE',
  RENT_MANAGER_ACTION = 'RENT_MANAGER',
  PROPERTY_TREE_ACTION = 'PROPERTY_TREE',
  CALENDAR_EVENT = 'CALENDAR_EVENT',
  NEW_TASK = 'NEW_TASK',
  CHECK_LIST = 'CHECK_LIST'
}

export enum ETypeElement {
  STEP = 'STEP',
  SECTION = 'SECTION',
  DECISION = 'DECISION'
}

export enum EStepType {
  COMMUNICATE = 'COMMUNICATE',
  PROPERTY_TREE = 'PROPERTY_TREE',
  CALENDAR_EVENT = 'CALENDAR_EVENT',
  RENT_MANAGER = 'RENT_MANAGER',
  NEW_TASK = 'NEW_TASK',
  CHECK_LIST = 'CHECK_LIST'
}

export enum EDynamicType {
  CALENDER_EVENT = 'CALENDER_EVENT',
  COMMUNICATION_STEP = 'COMMUNICATION_STEP',
  PT_COMPONENT = 'PT_COMPONENT',
  SUMMARY_REQUEST = 'SUMMARY_REQUEST',
  RM_COMPONENT = 'RM_COMPONENT'
}

export enum ECrmType {
  PROPERTY_TREE = 'Property Tree',
  PROPERTY_ME = 'Property Me',
  RENT_MANAGER = 'Rent Manager',
  CONSOLE_CLOUD = 'Console Cloud',
  PMX = 'PMX'
}

export interface ActionType {
  CREATE: EButtonAction.PT_NEW_COMPONENT | ERentManagerAction.RM_NEW_COMPONENT;
  UPDATE:
    | EButtonAction.PT_UPDATE_COMPONENT
    | ERentManagerAction.RM_UPDATE_COMPONENT;
}

export enum ConflictStepType {
  DYNAMIC_TYPE = 'DYNAMIC_TYPE',
  SEND_TO = 'SEND_TO',
  EVENT = 'EVENT',
  CONTACT_TYPE = 'CONTACT_TYPE',
  COMPONENT_ACTION = 'COMPONENT_ACTION'
}

export enum EActionShowMessageToolbar {
  Published = 'PUBLISH_TASKS',
  MoveToDraft = 'MOVE_TASKS_TO_DRAFT',
  Archive = 'ARCHIVE_TASKS'
}

export enum ETypeToolbar {
  Published = 'Published',
  MoveToDraft = 'MoveToDraft',
  Archive = 'Archive',
  TaskSelected = 'TaskSelected',
  Close = 'Close'
}
